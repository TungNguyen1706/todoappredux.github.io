{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","components/TaskForm.js","components/Navbar.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditting.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["editItem","task","type","Search","props","state","keyword","onChange","bind","onSearch","event","target","name","value","this","setState","className","placeholder","onClick","id","Component","connect","dispatch","actions","Sort","sortBy","sortValue","onSort","by","sort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","Control","TaskList","onChangeStatus","onUpdateStatus","onDelete","onDeleteTask","onCloseForm","onUpdate","onOpenForm","onEditItem","confirmDelete","confirmAlert","title","message","buttons","label","index","scope","status","onDoubleClick","checked","filter","filterName","filterStatus","onFilterTable","tasks","filterTable","toLowerCase","indexOf","a","b","elmTask","map","TaskItem","key","search","TaskForm","closeForm","onSubmit","preventDefault","onSaveTask","onClear","itemEditting","nextProps","isDisplayForm","aria-label","aria-hidden","Navbar","href","data-target","aria-controls","App","onToogleForm","onClearTask","Boolean","window","location","hostname","match","findIndex","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","uuidv4","push","setItem","stringify","splice","parseInt","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b0bcb374.chunk.js","sourcesContent":["import * as types from './../constants/ActionTypes';\r\n\r\nexport const listAll = () => {\r\n    return {\r\n        type : types.LIST_ALL\r\n    }\r\n}; \r\nexport const saveTask = (task) => {\r\n    return {\r\n        type : types.SAVE_TASK,\r\n        task //task:task\r\n    }\r\n}; \r\nexport const toogleForm = () => {\r\n    return {\r\n        type : types.TOOGLE_FORM\r\n    }\r\n}; \r\nexport const openForm = () => {\r\n    return {\r\n        type : types.OPEN_FORM\r\n    }\r\n}; \r\nexport const closeForm = () => {\r\n    return {\r\n        type : types.CLOSE_FORM\r\n    }\r\n}; \r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type : types.UPDATE_STATUS_TASK,\r\n        id //id: id\r\n    }\r\n}; \r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type : types.DELETE_TASK,\r\n        id //id: id\r\n    }\r\n}; \r\nexport const editItem = (task) => {\r\n    return {\r\n        type : types.EDIT_ITEM,\r\n        task //task : task\r\n    }\r\n}; \r\nexport const filterTask = (filter) => {\r\n    return {\r\n        type : types.FILTER_TABLE,\r\n        filter // filter : filter = > filtername , filterStatus\r\n    }\r\n}; \r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type : types.SEARCH,\r\n        keyword \r\n    }\r\n}; \r\nexport const sortTask = (sort) => {\r\n    return {\r\n        type : types.SORT,\r\n        sort \r\n    }\r\n}; \r\n","export const LIST_ALL ='LIST_ALL';\r\nexport const SAVE_TASK ='SAVE_TASK';\r\nexport const TOOGLE_FORM ='TOOGLE_FORM';\r\nexport const CLOSE_FORM ='CLOSE_FORM';\r\nexport const OPEN_FORM ='OPEN_FORM';\r\nexport const UPDATE_STATUS_TASK ='UPDATE_STATUS_TASK';\r\nexport const DELETE_TASK ='DELETE_TASK';\r\nexport const EDIT_ITEM ='EDIT_ITEM';\r\nexport const FILTER_TABLE ='FILTER_TABLE';\r\nexport const SEARCH ='SEARCH';\r\nexport const SORT ='SORT';\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\n\r\nclass Search extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        keyword : ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSearch = this.onSearch.bind(this);\r\n  }\r\n  onChange(event){\r\n      let target = event.target;\r\n      let name   = target.name;\r\n      let value  = target.value;\r\n\r\n      this.setState({\r\n          [name] : value\r\n      });\r\n  }\r\n  onSearch(){\r\n      this.props.onSearch(this.state.keyword);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div className=\"col-8\">\r\n        <div className=\"input-group mb-3\">\r\n          <input value={this.state.keyword} onChange={this.onChange} name=\r\n          \"keyword\" type=\"text\" className=\"form-control\" placeholder=\"Nhập từ khóa...\" />\r\n          <div className=\"input-group-append\">\r\n            <button onClick={this.onSearch} className=\"btn btn-info\" type=\"button\" id=\"button-addon2\"><i className=\"icofont-search-1\"></i></button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state)=>{\r\n  return { }\r\n}\r\nconst mapDispatchToProps = (dispatch,props) => {\r\n  return {\r\n      onSearch : (keyword) => {\r\n          dispatch(actions.searchTask(keyword))\r\n      }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);\r\n","import React, { Component } from 'react';\r\nimport { sortBy } from 'lodash';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\n\r\nclass Sort extends Component {\r\n  constructor(props){\r\n    super(props);\r\n   \r\n  }\r\n  onClick = (sortBy,sortValue) =>{\r\n    this.props.onSort({\r\n      by: sortBy,\r\n      value : sortValue\r\n    });\r\n  }\r\n\r\n  render(){\r\n    let {sort} = this.props;\r\n    return (\r\n        <div className=\"col-4\">\r\n            <div className=\"dropdown \" id=\"sort\">\r\n                <button className=\"btn btn-info dropdown-toggle \" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                <i className=\"icofont-chart-histogram-alt\"></i>  Sắp xếp\r\n                </button>\r\n                <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\r\n                    <a onClick={()=>this.onClick('name',1)} type=\"button\" \r\n                        className={(sort.by==='name'&& sort.value===1)?'dropdown-item sort-selected':'dropdown-item'}>\r\n                      Từ A-&gt;Z\r\n                    </a>\r\n                    <a  onClick={()=>this.onClick('name',-1)} type=\"button\" \r\n                        className={(sort.by==='name'&&sort.value===-1)?'dropdown-item sort-selected':'dropdown-item'}> \r\n                       Từ Z-&gt;A\r\n                    </a>\r\n                    <a  onClick={()=>this.onClick('status',1)}type=\"button\" \r\n                       className={(sort.by==='status'&&sort.value===1)?'dropdown-item sort-selected':'dropdown-item'} >\r\n                      Trạng thái Kích hoạt\r\n                    </a>\r\n                    <a  onClick={()=>this.onClick('status',-1)} type=\"button\" \r\n                         className={(sort.by==='status'&&sort.value===-1)?'dropdown-item sort-selected':'dropdown-item'}>\r\n                      Trạng thái Ẩn\r\n                    </a>\r\n                </div>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n     sort : state.sort\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch,props) => {\r\n  return {\r\n   onSort : (sort) =>{\r\n     dispatch(actions.sortTask(sort));\r\n   }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Sort);","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass Control extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div>\r\n            <div className=\"row mt-3\">\r\n                <Search  />\r\n                {/* end Search */}   \r\n                <Sort />\r\n                {/* end Sort */}  \r\n            </div>\r\n        </div>\r\n        \r\n         \r\n    );\r\n  }\r\n}\r\n\r\nexport default Control;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\n\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n      }\r\n\r\n    onChangeStatus = () =>{\r\n        this.props.onUpdateStatus(this.props.task.id)\r\n    }\r\n    onDelete = () =>{\r\n        this.props.onDeleteTask(this.props.task.id);\r\n        this.props.onCloseForm();\r\n    }\r\n    onUpdate = () =>{\r\n        this.props.onOpenForm();\r\n        this.props.onEditItem(this.props.task);\r\n    }\r\n    \r\n    confirmDelete = () => {\r\n        confirmAlert({\r\n          title: 'XÁC NHẬN !!!',\r\n          message: 'Bạn có chắn chắn muốn xóa?',\r\n          buttons: [\r\n            {\r\n              label: 'Có',\r\n              onClick: this.onDelete \r\n            },\r\n            {\r\n              label: 'Không',\r\n            }\r\n          ]\r\n        });\r\n      };\r\n    \r\n    render(){\r\n    \r\n        let {task,index}= this.props;\r\n       \r\n    return (\r\n        \r\n        <tr>\r\n            <th scope=\"row\">{index + 1}</th>\r\n            <td>{task.name}</td>\r\n            <td>\r\n            <span \r\n                className= {task.status===true?'badge badge-success badge-focus':'badge badge-danger badge-focus'}\r\n                onDoubleClick = {this.onChangeStatus}\r\n            >\r\n               {task.status===true?'Kích hoạt':'Ẩn'}\r\n            </span>\r\n            </td>\r\n            <td>\r\n              <button onClick={this.onUpdate} type=\"button\" className=\"btn btn-dark btn-sm mr-1\"><i className=\"icofont-ui-edit \"></i></button>\r\n              <button onClick={this.confirmDelete} type=\"button\" className=\"btn btn-outline-dark btn-sm mr-1\" ><i className=\"icofont-ui-delete\"></i></button>\r\n            </td>\r\n        </tr>\r\n                    \r\n    );\r\n  }\r\n};\r\nconst mapStateToProps = state => {\r\n  return {\r\n   \r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch,props) => {\r\n  return {\r\n     onUpdateStatus : (id) => {\r\n         dispatch(actions.updateStatus(id));\r\n     },\r\n     onDeleteTask : (id)=>{\r\n       dispatch(actions.deleteTask(id));\r\n     },\r\n     onCloseForm : () => {\r\n      dispatch(actions.closeForm());\r\n    },\r\n      onOpenForm : () => {\r\n      dispatch(actions.openForm());\r\n    },\r\n    \r\n    onEditItem : (task) => {\r\n      dispatch(actions.editItem(task));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\n\r\nclass TaskList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            filterName : '',\r\n            filterStatus: -1 \r\n        };\r\n    }\r\n    onChange = (event) =>{\r\n        let target = event.target;\r\n        let name = target.name;\r\n        let value = target.value === 'checkbox'? target.checked : target.value;\r\n      \r\n        let filter = {\r\n            name :   name === \"filterName\" ? value : this.state.filterName,\r\n            status : name === \"filterStatus\" ? value : this.state.filterStatus\r\n        }\r\n        this.props.onFilterTable(filter)\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n       \r\n    }\r\n    \r\n  render(){\r\n    let {tasks,filterTable,keyword,sort}= this.props;\r\n    \r\n    // search\r\n    if(keyword){\r\n        tasks = tasks.filter((task)=>{\r\n            return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1 ;\r\n        })\r\n    }\r\n    //filter on table\r\n     if(filterTable){\r\n        if(filterTable.name){\r\n                tasks = tasks.filter((task)=>{\r\n                return task.name.toLowerCase().indexOf(filterTable.name) !== -1 ;\r\n            })\r\n        }\r\n        tasks = tasks.filter((task)=>{\r\n        if(filterTable.status === -1 ){\r\n            return task;\r\n        }\r\n        else {\r\n            return task.status === (filterTable.status === 1 ? true : false);\r\n        }\r\n        })\r\n    };\r\n    // sort \r\n    if(sort.by === 'name'){\r\n        tasks.sort((a,b)=>{\r\n            if(a.name.toLowerCase()>b.name.toLowerCase()) return sort.value;\r\n            else if (a.name.toLowerCase()<b.name.toLowerCase()) return -sort.value;\r\n            else return 0;\r\n        })\r\n    }else{\r\n        tasks.sort((a,b)=>{\r\n            if(a.status>b.status) return -sort.value;\r\n            else if (a.status<b.status) return sort.value;\r\n            else return 0;\r\n        })\r\n    }\r\n\r\n    let elmTask = tasks.map((task,index)=>{\r\n        return  < TaskItem \r\n                    key={task.id}\r\n                    index = {index}\r\n                    task = {task}     \r\n                />\r\n    })\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div className=\"row ml-md-1\">\r\n                    <table className=\"table table-hover table-striped text-center\">\r\n                        <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th className=\"w-10\" scope=\"col\">STT</th>\r\n                            <th className=\"w-45\" scope=\"col\">Tên</th>\r\n                            <th className=\"w-20\" scope=\"col\">Trạng thái</th>\r\n                            <th className=\"w-25\" scope=\"col\">Hành động</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <th scope=\"row\" />\r\n                            <td><input value={this.state.filterName} onChange={this.onChange} name=\"filterName\" className=\"form-control\" /></td>\r\n                            <td>\r\n                            <select value={this.state.filterStatus} onChange={this.onChange} name=\"filterStatus\" className=\"form-control\">\r\n                                <option value={-1}>Tất Cả</option>\r\n                                <option value={1}>Kích Hoạt</option>\r\n                                <option value={0}>Ẩn</option>\r\n                            </select>\r\n                            </td>\r\n                            <td />\r\n                        </tr>\r\n                           {elmTask}\r\n                       \r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return {\r\n        tasks : state.tasks,\r\n        filterTable : state.filterTable,\r\n        keyword : state.search,\r\n        sort : state.sort\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch,props) => {\r\n    return {\r\n        onFilterTable : (filter) => {\r\n            dispatch(actions.filterTask(filter))\r\n        }\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\n\r\nclass TaskForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            id   :'',\r\n            name : '',\r\n            status: false,\r\n        };\r\n      }\r\n      UNSAFE_componentWillMount(){\r\n        let {itemEditting} = this.props;\r\n        if(itemEditting && itemEditting.id !== null){\r\n              this.setState({\r\n                  id : itemEditting.id,\r\n                  name  : itemEditting.name,\r\n                  status : itemEditting.status\r\n              });\r\n            }\r\n        else{\r\n            this.onClear();\r\n        }\r\n      }\r\n      componentWillReceiveProps(nextProps){\r\n        let {itemEditting} = this.props;\r\n          if(nextProps && nextProps.itemEditting){\r\n              this.setState({\r\n                id : nextProps.itemEditting.id,\r\n                name  : nextProps.itemEditting.name,\r\n                status : nextProps.itemEditting.status\r\n              })\r\n          }else if(!nextProps.itemEditting){\r\n            this.onClear();\r\n          }\r\n      }\r\n      closeForm = () =>{\r\n        this.props.onCloseForm() ;\r\n      }\r\n      onChange = (event) =>{\r\n        let target = event.target;\r\n        let value = target.value;\r\n        let name = target.name;\r\n\r\n        //ep kieu\r\n        if( name === \"status\" ){\r\n             value = target.value === 'true' ? true : false\r\n        };\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n       \r\n      }\r\n      onSubmit = (event) =>{\r\n        event.preventDefault();\r\n        this.props.onSaveTask(this.state);\r\n        this.onClear();\r\n        this.closeForm();\r\n\r\n      }\r\n      onClear = () =>{\r\n        this.setState({\r\n            name : '',\r\n            status: false,\r\n        })\r\n      }\r\n\r\n\r\n  render(){\r\n    let {id} = this.state;\r\n\r\n    let {isDisplayForm,itemEditting} = this.props;\r\n\r\n    if(!isDisplayForm) return null;\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-header bg-warning text-danger\">\r\n                {itemEditting.id === '' ? 'Thêm công việc' : 'Cập nhật'}\r\n                <button type=\"button\" className=\"close text-right\" aria-label=\"Close\">\r\n                    <span onClick={this.closeForm} aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>Tên : </label>\r\n                    <input value={this.state.name} onChange={this.onChange} className=\"form-control\" name=\"name\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Trạng thái : </label>\r\n                    <select value={this.state.status} onChange={this.onChange} className=\"form-control\" name=\"status\">\r\n                    <option value={true} >Kích Hoạt</option>\r\n                    <option value={false}>Ẩn</option>\r\n                    </select>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-danger\">Thêm</button>\r\n                <button onClick={this.onClear} type=\"button\" className=\"btn btn-warning\">Hủy bỏ</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isDisplayForm : state.isDisplayForm,\r\n    itemEditting : state.itemEditting\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch,props) => {\r\n  return {\r\n    onSaveTask : (task) => {\r\n        dispatch(actions.saveTask(task));\r\n      },\r\n      onCloseForm : () => {\r\n        dispatch(actions.closeForm());\r\n      }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\r\n","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions/index';\r\n\r\nclass Navbar extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div>\r\n           <nav className=\"navbar  navbar-dark bg-dark mb-3\">\r\n            <div className= \"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">TODO LIST</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo03\" aria-controls=\"navbarTogglerDemo03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\" />\r\n                    </button>       \r\n            </div>\r\n          </nav>\r\n        </div>\r\n        \r\n         \r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\nimport TaskForm from './components/TaskForm';\nimport Navbar from './components/Navbar';\nimport {connect} from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n        }\n    }\n    onToogleForm = () =>{\n       \n        let {itemEditting} =this.props;\n        if(itemEditting && itemEditting.id !== ''){\n            // editting\n            this.props.onOpenForm();\n        }\n        else{\n            //add item\n            this.props.onToogleForm();\n        }\n        this.props.onClearTask({\n            id: '',\n            name : '',\n            status: false\n        })\n\n    };\n\n    render()\n    {\n        let {isDisplayForm} = this.props;\n    return (\n\n      <div>\n          <Navbar />\n        <div className= \"container\">\n          <div className=\"row\">\n            <div className= {isDisplayForm ? 'col-xs-12 col-md-4': ''} >\n                <TaskForm  /> \n            </div>\n            {/* end them cong viec */}\n            <div className= {isDisplayForm ? 'col-xs-12 col-md-8': 'col-xs-12 col-md-12'}>\n              <div className=\"row \">\n                <button onClick={this.onToogleForm} type=\"button\" className={isDisplayForm?'btn btn-danger ml-3 mt-2':'btn btn-dark ml-3'}>\n                    <i className=\"icofont-ui-add\">&nbsp;</i>\n                    Thêm công việc\n                </button>\n              </div>\n                < Control/>\n                < TaskList />            \n            </div>\n          </div>\n          </div>\n      </div>\n    );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm : state.isDisplayForm,\n        itemEditting : state.itemEditting\n    }\n  }\nconst mapDispatchToProps = (dispatch,props) => {\nreturn {\n    onToogleForm : () => {\n        dispatch(actions.toogleForm())\n    },\n    onClearTask : (task) =>{\n        dispatch(actions.editItem(task))\n    },\n    onOpenForm : () => {\n    dispatch(actions.openForm())\n    }\n}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from './../constants/ActionTypes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nlet findIndex = (tasks,id) =>{\r\n    let result = -1;\r\n    tasks.forEach((task,index)=>{\r\n        if(task.id === id){\r\n            return result = index;    \r\n        }\r\n    })\r\n    return result;\r\n}\r\n\r\nlet data = JSON.parse(localStorage.getItem('tasks'));\r\nlet initialState = data? data : [];\r\nlet myReducer = (state = initialState, action)=>{\r\n    let id = '';\r\n    let index = -1;\r\n    switch(action.type){\r\n        case types.LIST_ALL : \r\n            return state; \r\n        // --------------------------------------------------------------\r\n        case types.SAVE_TASK :\r\n\r\n            let task = {\r\n                    id : action.task.id,\r\n                    name : action.task.name,\r\n                    status: action.task.status \r\n                }\r\n            if (!task.id){\r\n                task.id = uuidv4()  ;\r\n                state.push(task);\r\n            }else {\r\n                index = findIndex(state,task.id);\r\n                state[index] = task;\r\n            }\r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n            // tranh tham chieu\r\n            return [...state];\r\n        // -----------------------------------------------------------------\r\n        case types.UPDATE_STATUS_TASK :\r\n            id = action.id;\r\n            index = findIndex(state,id);\r\n            // ---c1\r\n            // let cloneTask = {...state[index]};\r\n            // cloneTask.status = !cloneTask.status;\r\n            // state[index] = cloneTask;\r\n\r\n            // ---c2\r\n            state[index] = {\r\n                ...state[index],\r\n                status : !state[index].status\r\n            }\r\n            localStorage.setItem('tasks' , JSON.stringify(state));\r\n           \r\n            return [...state];\r\n        // -------------------------------------------------------------------\r\n        case types.DELETE_TASK :\r\n            id = action.id;\r\n            index = findIndex(state,id);\r\n            state.splice(index,1);\r\n            localStorage.setItem('tasks' , JSON.stringify(state));\r\n            return [...state];\r\n\r\n        // -------------------------------------------------------------------\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nlet initialState = false;\r\n\r\nlet myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.TOOGLE_FORM : \r\n            return !state; \r\n        case types.OPEN_FORM :\r\n            return state = true;\r\n        case types.CLOSE_FORM :\r\n             return state = false;\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nlet initialState = {\r\n    id: '',\r\n    name : '',\r\n    status : false\r\n};\r\n\r\nlet myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.EDIT_ITEM : \r\n            return action.task; \r\n\r\n        default : \r\n            return state;\r\n        \r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nlet initialState = {\r\n   name : '',\r\n   status : -1\r\n};\r\n\r\nlet myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.FILTER_TABLE : \r\n        action.filter.status = parseInt(action.filter.status,10)\r\n            return action.filter; \r\n\r\n        default : \r\n            return state;\r\n        \r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nlet initialState = '';\r\n\r\nlet myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.SEARCH : \r\n            return action.keyword; \r\n\r\n        default : \r\n            return state;\r\n        \r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nlet initialState = {\r\n   by : 'name',\r\n   value : 1\r\n};\r\n\r\nlet myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.SORT : \r\n            return action.sort; \r\n\r\n        default : \r\n            return state;\r\n        \r\n    }\r\n};\r\n\r\nexport default myReducer;","import {combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport itemEditting from './itemEditting';\r\nimport filterTable from './filterTable';\r\nimport search from './search';\r\nimport sort from './sort';\r\n\r\nconst myReducer = combineReducers({\r\n    tasks, //tasks:tasks \r\n    isDisplayForm,\r\n    itemEditting,\r\n    filterTable,\r\n    search,\r\n    sort\r\n});\r\nexport default myReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Store\nimport {createStore} from 'redux';\nimport myReducer from './reducers/index';\nimport {Provider} from 'react-redux';\nconst store = createStore(\n      myReducer,\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n      );\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n       <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}